# task_manager.py
# -*- coding: utf-8 -*-

from datetime import datetime
from db import Task, get_session
from ai_service import parse_task_with_ai
import dateparser
from apscheduler.schedulers.background import BackgroundScheduler
import pytz

scheduler = BackgroundScheduler()
scheduler.start()

# Helper for priority sorting (map string priorities to sortable numbers)
PRIORITY_ORDER = {'high': 3, 'medium': 2, 'low': 1}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def schedule_reminder(bot_app, chat_id, task_id, task_text, due_date):
    if due_date:
        job_id = f"reminder_{task_id}"
        scheduler.add_job(
            send_reminder_message,
            'date',
            run_date=due_date,
            args=[bot_app, chat_id, task_id, task_text],
            id=job_id,
            replace_existing=True
        )
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {due_date}")

# Function that will send a reminder
async def send_reminder_message(bot_app, chat_id, task_id, task_text):
    # Get a new session for this async function
    session = get_session()
    try:
        task = session.query(Task).filter_by(id=task_id).first()
        if task and task.status == 'pending': # Send only if task is still pending
            now_utc = datetime.now(pytz.utc)
            # Ensure the scheduled task hasn't been completed or passed long ago
            if task.due_date and task.due_date <= now_utc:
                await bot_app.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç! üëã –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∞: *{task_text}*! –î–∞–≤–∞–π –µ–µ —Å–¥–µ–ª–∞–µ–º?")
                # Optional: You might want to update task status to 'overdue' here
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
    finally:
        session.close()


def add_task(user_id: int, raw_task_text: str) -> str:
    session = get_session()
    try:
        default_timezone = pytz.utc

        parsed_data = parse_task_with_ai(raw_task_text, user_id)
        task_text = parsed_data.get('task_text')
        due_date_str = parsed_data.get('due_date')
        priority = parsed_data.get('priority', 'medium').lower()
        category = parsed_data.get('category', None) # <-- –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

        # Validate priority (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ)
        if priority not in PRIORITY_ORDER:
            priority = 'medium'

        if not task_text:
            return "–Ø –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ –∑–∞ –∑–∞–¥–∞—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —è—Å–Ω–µ–µ."

        # ... (–ø–∞—Ä—Å–∏–Ω–≥ due_date_str - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        due_date = None
        if due_date_str:
            try:
                due_date = dateparser.parse(
                    due_date_str,
                    settings={
                        'TIMEZONE': default_timezone.tzname(datetime.now()),
                        'PREFER_DATES_FROM': 'future',
                        'RELATIVE_BASE': datetime.now(default_timezone)
                    }
                )
                if due_date and due_date.tzinfo is None:
                    due_date = default_timezone.localize(due_date)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ due_date_str —á–µ—Ä–µ–∑ dateparser: {e}")
                try:
                    due_date = datetime.strptime(due_date_str, '%Y-%m-%d %H:%M:%S')
                    due_date = default_timezone.localize(due_date)
                except ValueError:
                    pass

        if not due_date and ("–Ω–∞–ø–æ–º–Ω–∏" in raw_task_text.lower() or "–∑–∞–≤—Ç—Ä–∞" in raw_task_text.lower() or "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in raw_task_text.lower() or "–≤ —Å—Ä–µ–¥—É" in raw_task_text.lower()):
            due_date = dateparser.parse(
                raw_task_text,
                settings={
                    'PREFER_DATES_FROM': 'future',
                    'RELATIVE_BASE': datetime.now(default_timezone),
                    'TIMEZONE': default_timezone.tzname(datetime.now())
                }
            )
            if due_date and due_date.tzinfo is None:
                 due_date = default_timezone.localize(due_date)

        # <-- –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º category –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Task
        new_task = Task(user_id=user_id, task_text=task_text, due_date=due_date, priority=priority, category=category)
        session.add(new_task)
        session.commit()

        response_message = f"–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª –∑–∞–¥–∞—á—É: *{new_task.task_text}*."
        if new_task.due_date:
            display_due_date = new_task.due_date.astimezone(pytz.timezone('Europe/Amsterdam'))
            response_message += f"\n–ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ {display_due_date.strftime('%Y-%m-%d –≤ %H:%M')} ({display_due_date.tzinfo.tzname(display_due_date)})."
        response_message += f"\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: *{priority.capitalize()}*."
        if new_task.category: # <-- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –æ—Ç–≤–µ—Ç
            response_message += f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{new_task.category.capitalize()}*."
        
               # Schedule reminder immediately after task addition
        if new_task.due_date:
            # You need to pass `context.application.bot` from main.py
            # This is handled in main.py's add_task_command where `schedule_reminder` is called.
            pass # No need to call here, main.py will handle it

        return response_message
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏."
    finally:
        session.close()

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø get_user_tasks –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
def get_user_tasks(user_id: int, status: str = 'pending', category: str = None) -> list[Task]:
    session = get_session()
    try:
        query = session.query(Task).filter_by(user_id=user_id)
        if status != 'all':
            query = query.filter_by(status=status)
        
        if category: # <-- –ù–û–í–û–ï: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            query = query.filter_by(category=category.lower()) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

        tasks = query.all()
        # Sort in Python after fetching
        tasks.sort(key=lambda task: (PRIORITY_ORDER.get(task.priority, 0), task.due_date if task.due_date else datetime.max.replace(tzinfo=pytz.utc)), reverse=True)
        # We sort high, medium, low, so 'high' (3) should be at the top, hence reverse=True
        # For due_date, we want earliest first, so keep it as is if `reverse=False` on due_date part.
        # But since we're using lambda for primary sort, a bit tricky.
        # Corrected sort logic: sort by priority (desc), then by due_date (asc)
        tasks.sort(key=lambda task: (PRIORITY_ORDER.get(task.priority, 0), task.due_date if task.due_date else datetime.max.replace(tzinfo=pytz.utc)))
        tasks.reverse() # Reverse the whole list to get high priority first

        return tasks
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        return []
    finally:
        session.close()

def mark_task_as_done(user_id: int, task_id: int) -> str:
    session = get_session()
    try:
        task = session.query(Task).filter_by(user_id=user_id, id=task_id).first()
        if task:
            task.status = 'completed'
            task.updated_at = datetime.now(pytz.utc) # Use timezone-aware datetime
            session.commit()
            return f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ó–∞–¥–∞—á–∞ '{task.task_text}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üéâ –¢—ã –ø—Ä–æ—Å—Ç–æ –º–æ–ª–æ–¥–µ—Ü!"
        else:
            return "–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ."
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É."
    finally:
        session.close()

def update_task_text(user_id: int, task_id: int, new_text: str) -> str:
    session = get_session()
    try:
        task = session.query(Task).filter_by(user_id=user_id, id=task_id).first()
        if task:
            task.task_text = new_text
            task.updated_at = datetime.now(pytz.utc) # Use timezone-aware datetime
            session.commit()
            return f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ '{task_id}' –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: *{new_text}*."
        else:
            return "–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ."
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏."
    finally:
        session.close()

def add_task_note(user_id: int, task_id: int, note: str) -> str:
    session = get_session()
    try:
        task = session.query(Task).filter_by(user_id=user_id, id=task_id).first()
        if task:
            if task.notes:
                task.notes += f"\n--- –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ({datetime.now(pytz.utc).strftime('%Y-%m-%d %H:%M')}): {note}" # Use timezone-aware datetime
            else:
                task.notes = f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ({datetime.now(pytz.utc).strftime('%Y-%m-%d %H:%M')}): {note}" # Use timezone-aware datetime
            task.updated_at = datetime.now(pytz.utc) # Use timezone-aware datetime
            session.commit()
            return f"–ö –∑–∞–¥–∞—á–µ '{task.id}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞. –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: _{task.notes}_"
        else:
            return "–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ."
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–¥–∞—á–µ: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É."
    finally:
        session.close()

# NEW FUNCTION: Set Task Priority
def set_task_priority(user_id: int, task_id: int, new_priority: str) -> str:
    session = get_session()
    try:
        task = session.query(Task).filter_by(user_id=user_id, id=task_id).first()
        if task:
            new_priority_lower = new_priority.lower()
            if new_priority_lower in PRIORITY_ORDER:
                task.priority = new_priority_lower
                task.updated_at = datetime.now(pytz.utc) # Use timezone-aware datetime
                session.commit()
                return f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ '{task.id}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{new_priority.capitalize()}*."
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç '{new_priority}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'high', 'medium' –∏–ª–∏ 'low'."
        else:
            return "–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ."
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏."
    finally:
        session.close()