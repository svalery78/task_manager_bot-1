# main.py
# -*- coding: utf-8 -*-
from datetime import datetime
import pytz
from telegram import Update, ForceReply
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
from config import TELEGRAM_BOT_TOKEN
from task_manager import add_task, get_user_tasks, mark_task_as_done, update_task_text, add_task_note, set_task_priority, schedule_reminder, scheduler
import db # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Task –º–æ–¥–µ–ª–∏
from ai_service import generate_ai_response

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    ai_greeting = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –µ–≥–æ –∫–∞–∫ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å (–ø–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å).", user.id)
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! {ai_greeting}",
        reply_markup=ForceReply(selective=True),
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "*/add <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏> [–¥–∞—Ç–∞/–≤—Ä–µ–º—è] [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç] [#–∫–∞—Ç–µ–≥–æ—Ä–∏—è]* - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, `/add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00 high #–ø–æ–∫—É–ø–∫–∏`). "
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å `high`, `medium` –∏–ª–∏ `low` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `medium`). "
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ –∑–Ω–∞–∫–æ–º `#`.\n" # <-- –û–ë–ù–û–í–õ–ï–ù–û –æ–ø–∏—Å–∞–Ω–∏–µ /add
        "*/list [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]* - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É. "
        "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/list –ø–æ–∫—É–ø–∫–∏`).\n" # <-- –û–ë–ù–û–í–õ–ï–ù–û –æ–ø–∏—Å–∞–Ω–∏–µ /list
        "*/done <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>* - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.\n"
        "*/edit <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>* - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏.\n"
        "*/note <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏>* - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ.\n"
        "*/set_priority <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> <high|medium|low>* - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏. \n"
        "*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–¥–∞—á—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–µ –ø–æ–Ω—è—Ç—å!"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not context.args:
        ai_response = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª /add –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.", user_id)
        await update.message.reply_text(ai_response)
        return

    raw_task_text = " ".join(context.args)
    response_message = add_task(user_id, raw_task_text)
    await update.message.reply_text(response_message)

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —É –Ω–µ–µ –µ—Å—Ç—å –≤—Ä–µ–º—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if "–ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ" in response_message:
        session = db.get_session()
        task = session.query(db.Task).filter_by(user_id=user_id, task_text=raw_task_text).order_by(db.Task.created_at.desc()).first()
        if task and task.due_date:
            schedule_reminder(context.application.bot, update.effective_chat.id, task.id, task.task_text, task.due_date)
        session.close()

async def list_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    category_filter = None
    if context.args: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        category_filter = context.args[0].lower() # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è –ø–æ–∏—Å–∫–∞

    tasks = get_user_tasks(user_id, category=category_filter) # <-- –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ get_user_tasks

    if not tasks:
        if category_filter:
            ai_response = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_filter}', –Ω–æ –∑–∞–¥–∞—á –Ω–µ—Ç. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–±–∞–≤–∏—Ç—å.", user_id)
        else:
            ai_response = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –Ω–æ —É –Ω–µ–≥–æ –∏—Ö –Ω–µ—Ç. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–±–∞–≤–∏—Ç—å.", user_id)
        await update.message.reply_text(ai_response)
        return

    message = "–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
    if category_filter:
        message = f"–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_filter.capitalize()}*:\n\n"

    for task in tasks: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ task, –∞ –Ω–µ enumerate, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å task.id
        due_date_str = ""
        if task.due_date:
            display_tz = pytz.timezone('Europe/Amsterdam')
            display_due_date = task.due_date.astimezone(display_tz)
            due_date_str = f" (–¥–æ {display_due_date.strftime('%Y-%m-%d %H:%M')})"

        notes_str = f" _(–ó–∞–º–µ—Ç–∫–∏: {task.notes})_" if task.notes else ""

        priority_display = ""
        if task.priority == 'high':
            priority_display = " üî•*–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç*üî•"
        elif task.priority == 'medium':
            priority_display = " üü°–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        elif task.priority == 'low':
            priority_display = " üü¢–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"

        category_display = ""
        if task.category: # <-- –ù–û–í–û–ï: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_display = f" #{task.category}"

        message += f"*{task.id}.* {task.task_text}{due_date_str}{notes_str}{priority_display}{category_display}\n"
    await update.message.reply_text(message, parse_mode='Markdown')

async def done_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not context.args or not context.args[0].isdigit():
        ai_response = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª /done –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º. –ü–æ–ø—Ä–æ—Å–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä.", user_id)
        await update.message.reply_text(ai_response)
        return

    task_id = int(context.args[0])
    response_message = mark_task_as_done(user_id, task_id)
    await update.message.reply_text(response_message)

async def edit_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if len(context.args) < 2 or not context.args[0].isdigit():
        ai_response = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª /edit –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ—Å–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", user_id)
        await update.message.reply_text(ai_response)
        return

    task_id = int(context.args[0])
    new_text = " ".join(context.args[1:])
    response_message = update_task_text(user_id, task_id, new_text)
    await update.message.reply_text(response_message)

async def add_note_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if len(context.args) < 2 or not context.args[0].isdigit():
        ai_response = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª /note –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ—Å–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", user_id)
        await update.message.reply_text(ai_response)
        return

    task_id = int(context.args[0])
    note_text = " ".join(context.args[1:])
    response_message = add_task_note(user_id, task_id, note_text)
    await update.message.reply_text(response_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    text = update.message.text

    # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if not text.startswith('/'):
        response_message = add_task(user_id, text)
        await update.message.reply_text(response_message)

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —É –Ω–µ–µ –µ—Å—Ç—å –≤—Ä–µ–º—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if "–ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ" in response_message:
            session = db.get_session()
            task = session.query(db.Task).filter_by(user_id=user_id, task_text=text).order_by(db.Task.created_at.desc()).first()
            if task and task.due_date:
                schedule_reminder(context.application.bot, update.effective_chat.id, task.id, task.task_text, task.due_date)
            session.close()

    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
        ai_response = generate_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª: '{text}'. –û—Ç–≤–µ—Ç—å –µ–º—É –∫–∞–∫ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.", user_id)
        await update.message.reply_text(ai_response)

async def set_priority_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    # Expects /set_priority <task_id> <priority>
    if len(context.args) < 2 or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/set_priority <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> <high|medium|low>`", parse_mode='Markdown')
        return

    task_id = int(context.args[0])
    new_priority = context.args[1].lower() # Ensure it's lowercase for validation

    response_message = set_task_priority(user_id, task_id, new_priority)
    await update.message.reply_text(response_message, parse_mode='Markdown')


def main() -> None:
    # ... (application setup - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    print("–ë–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–Ω—Ç.")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add_task_command))
    application.add_handler(CommandHandler("list", list_tasks_command)) # <-- –û–±–Ω–æ–≤–ª–µ–Ω
    application.add_handler(CommandHandler("done", done_task_command))
    application.add_handler(CommandHandler("edit", edit_task_command))
    application.add_handler(CommandHandler("note", add_note_command))
    application.add_handler(CommandHandler("set_priority", set_priority_command))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
   
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    import db # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    main()